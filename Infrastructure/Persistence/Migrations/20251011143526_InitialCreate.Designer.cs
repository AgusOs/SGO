// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGO.Infrastructure.Persistence.Context;

#nullable disable

namespace SGO.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SGOContext))]
    [Migration("20251011143526_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<uint>("Version")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SGO.Domain.Fichas.FichaClinica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("FechaCreacionUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("MotivoConsulta")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PacienteDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Prescripciones")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ProfesionalMatricula")
                        .HasColumnType("int");

                    b.Property<Guid>("TurnoId")
                        .HasColumnType("char(36)");

                    b.Property<uint>("Version")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("PacienteDocumento");

                    b.HasIndex("ProfesionalMatricula");

                    b.HasIndex("TurnoId");

                    b.ToTable("fichas_clinicas", (string)null);
                });

            modelBuilder.Entity("SGO.Domain.Odontogramas.Odontograma", b =>
                {
                    b.Property<Guid>("FichaClinicaId")
                        .HasColumnType("char(36)");

                    b.Property<uint>("Version")
                        .HasColumnType("int unsigned");

                    b.HasKey("FichaClinicaId");

                    b.ToTable("odontogramas", (string)null);
                });

            modelBuilder.Entity("SGO.Domain.Pacientes.Paciente", b =>
                {
                    b.Property<int>("Documento")
                        .HasColumnType("int");

                    b.Property<bool>("Alergico")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Cardiaco")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DetalleAlergias")
                        .HasColumnType("longtext");

                    b.Property<string>("DetalleEnfermedad")
                        .HasColumnType("longtext");

                    b.Property<bool>("Diabetico")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("EnMedicacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnfermedadSistemica")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<bool>("Hepatitis")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Hipertenso")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Medicacion")
                        .HasColumnType("longtext");

                    b.Property<bool>("Mononucleosis")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroAfiliado")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ObraSocial")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<uint>("Version")
                        .HasColumnType("int unsigned");

                    b.HasKey("Documento");

                    b.ToTable("pacientes", (string)null);
                });

            modelBuilder.Entity("SGO.Domain.Procedimientos.Procedimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FichaClinicaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("longtext");

                    b.Property<int>("PiezaFdi")
                        .HasColumnType("int");

                    b.Property<string>("Profesional")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Superficie")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FichaClinicaId");

                    b.ToTable("procedimientos", (string)null);

                    b.HasDiscriminator().HasValue("Procedimiento");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SGO.Domain.Turnos.Turno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime");

                    b.Property<string>("Motivo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PacienteDocumento")
                        .HasColumnType("int");

                    b.Property<int>("ProfesionalMatricula")
                        .HasColumnType("int");

                    b.Property<uint>("Version")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("PacienteDocumento");

                    b.ToTable("turnos", (string)null);
                });

            modelBuilder.Entity("SGO.Domain.Procedimientos.Extraccion", b =>
                {
                    b.HasBaseType("SGO.Domain.Procedimientos.Procedimiento");

                    b.Property<bool>("Quirurgica")
                        .HasColumnType("tinyint(1)");

                    b.ToTable("procedimientos");

                    b.HasDiscriminator().HasValue("Extraccion");
                });

            modelBuilder.Entity("SGO.Domain.Procedimientos.Limpieza", b =>
                {
                    b.HasBaseType("SGO.Domain.Procedimientos.Procedimiento");

                    b.Property<bool>("ConProfilaxis")
                        .HasColumnType("tinyint(1)");

                    b.ToTable("procedimientos");

                    b.HasDiscriminator().HasValue("Limpieza");
                });

            modelBuilder.Entity("SGO.Domain.Fichas.FichaClinica", b =>
                {
                    b.HasOne("SGO.Domain.Pacientes.Paciente", "Paciente")
                        .WithMany("FichasClinicas")
                        .HasForeignKey("PacienteDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SGO.Domain.Odontogramas.Odontograma", b =>
                {
                    b.HasOne("SGO.Domain.Fichas.FichaClinica", null)
                        .WithOne("Odontograma")
                        .HasForeignKey("SGO.Domain.Odontogramas.Odontograma", "FichaClinicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("SGO.Domain.Odontogramas.PiezaDental", "Piezas", b1 =>
                        {
                            b1.Property<Guid>("OdontogramaId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("D")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<int>("Fdi")
                                .HasColumnType("int");

                            b1.Property<string>("L")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("M")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("O")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("V")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.HasKey("OdontogramaId", "Id");

                            b1.ToTable("odontograma_piezas", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OdontogramaId");
                        });

                    b.Navigation("Piezas");
                });

            modelBuilder.Entity("SGO.Domain.Procedimientos.Procedimiento", b =>
                {
                    b.HasOne("SGO.Domain.Fichas.FichaClinica", null)
                        .WithMany("Procedimientos")
                        .HasForeignKey("FichaClinicaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SGO.Domain.Turnos.Turno", b =>
                {
                    b.HasOne("SGO.Domain.Pacientes.Paciente", "Paciente")
                        .WithMany("Turnos")
                        .HasForeignKey("PacienteDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SGO.Domain.Fichas.FichaClinica", b =>
                {
                    b.Navigation("Odontograma")
                        .IsRequired();

                    b.Navigation("Procedimientos");
                });

            modelBuilder.Entity("SGO.Domain.Pacientes.Paciente", b =>
                {
                    b.Navigation("FichasClinicas");

                    b.Navigation("Turnos");
                });
#pragma warning restore 612, 618
        }
    }
}
